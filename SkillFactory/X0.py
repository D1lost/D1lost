def pole(): #Функция прорисовки игрового поля
    print()
    print("   0 1 2   ") #Верхняя строчка
    for i, row in enumerate(field): #enumerate - получение индекса списка и его элемента
        row_str = f" {i} {' '.join(row)}   " #присвоение строке элементы списка и разделениях их символом ' ' (пробел)
        print(row_str) #вывод построчно
    print()

def step(): #Функция хода игроков (ввод координат с последующей проверков на ошибки)
    while True:
        cords = input("Введите 2 координаты(x y): ").split()
        if len(cords) != 2: #длина координат несоответсвует необходимому значению
            print("Ошибка ввода. Пример: 2 2")
            continue
        x, y = cords
        
        if not(x.isdigit()) or not(y.isdigit()): #isdigit - возвращает true если строка состоит из цифр и есть хотя бы один символ
            print("Нужно вводить числа")
            continue
        
        x, y = int(x), int(y) #конвертация переменных в целочисленный тип данных
        
        if 0 > x or x > 2 or  0 > y or y > 2 : #проверка на вхождения значения переменных в диапозон: от 0 до 2
            print("За пределами поля")
            continue
        
        if field[x][y] != " ": #если ячейка "массива" не равна " " пробелу, то ячейка занята (ошибка)
            print("Ошибка. Занятая ячейка")
            continue
        
        return x, y #передача координат в основную программу
            
def win(): #Функция проверки выигрыша
    win_cord = (((0, 0), (0, 1), (0, 2)), ((1, 0), (1, 1), (1, 2)), ((2, 0), (2, 1), (2, 2)),
                ((0, 2), (1, 1), (2, 0)), ((0, 0), (1, 1), (2, 2)), ((0, 0), (1, 0), (2, 0)),
                ((0, 1), (1, 1), (2, 1)), ((0, 2), (1, 2), (2, 2))) #все возможные линии из 3 ячеек расположенных в поле
    for cord in win_cord: #
        symbols = [] #вспомогательный список
        for c in cord: #
            symbols.append(field[c[0]][c[1]]) #заполняет вспомогательный список значениями из "массива"
        if symbols == ["X", "X", "X"]: #условие проверки вспомогательного списка на победу игрока 1
            print("Выиграл - Игрок 1")
            return True
        if symbols == ["0", "0", "0"]: #условие проверки вспомогательного списка на победу игрока 2
            print("Выиграл - Игрок 2")
            return True
    return False

field = [[" "] * 3 for i in range(3) ] #воздание "массива" 3х3
count = 0 #счетчик
while True: #основной цикл игры
    count += 1 #увеличение счетчика
    pole() #вызов функции pole
    if count % 2 == 1: #проверка на четность счетчика. Не четный - игрок 1, четный - игрок 2
        print("Игрок 1 (X)") #Ход игрока 1
    else:
        print("Игрок 2 (0)") #Ход игрока 2
    
    x, y = step() #вызов функции step и получение координат игрока
    
    if count % 2 == 1: #проверка на четность счетчика. Не четный - игрок 1, четный - игрок 2
        field[x][y] = "X" #запись в "массив" по координатам x,y значение "X" (ход игрока 1)
    else:
        field[x][y] = "0" #запись в "массив" по координатам x,y значение "Y" (ход игрока 2)
    
    if win(): #вызов функции win
        break #завершение игры, путем остановки основного цикла
    
    if count == 9: #если за 9 ходов победитель не определен, то оглашается ничья
        print(" Ничья!")
        break #завершение игры, путем остановки основного цикла
